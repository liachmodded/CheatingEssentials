package com.luna.ce;

import com.luna.ce.api.APIModuleSetup;
import com.luna.ce.config.Config;
import com.luna.ce.forge.ForgeEventManager;
import com.luna.ce.log.CELogger;
import com.luna.ce.manager.ManagerCommand;
import com.luna.ce.manager.ManagerModule;
import com.luna.lib.loggers.enums.EnumLogType;

import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraft.client.Minecraft;
import net.minecraftforge.common.MinecraftForge;

import java.io.File;
import java.util.Arrays;

@Mod(modid = CheatingEssentials.MODID, name = CheatingEssentials.NAME, version = CheatingEssentials.VERSION, canBeDeactivated = true)
public class CheatingEssentials {
    static final String MODID = "cheatingessentials";
    static final String VERSION = "1.5";
    static final String RELEASE = "Kitty";
    static final String NAME = "CheatingEssentials";
    @Instance(MODID)
    private static CheatingEssentials instance;
    private final File ceDataDir = new File(String.format(
            "%s%scheatingessentials%s",
            Minecraft.getMinecraft().mcDataDir,
            File.separator, File.separator));
    private String commandPrefix = ":";
    private ForgeEventManager eventManager;

    public static CheatingEssentials getInstance() {
        return instance;
    }

    @EventHandler
    public void onPreInitialization(final FMLPreInitializationEvent event) {
        CELogger.getInstance().log(String.format("Adding %s metadata...", NAME));
        final ModMetadata metadata = event.getModMetadata();
        metadata.credits = "godshawk";
        metadata.version = VERSION;
        metadata.description = "SSP Cheating as never before seen!";
        metadata.autogenerated = false;
        metadata.authorList = Arrays.asList("godshawk");
        metadata.modId = MODID;
        metadata.name = NAME;
    }

    @EventHandler
    public void init(final FMLInitializationEvent event) {
        CELogger.getInstance().log(String.format("Starting up %s v%s (%s)...", NAME, VERSION, RELEASE));
        CELogger.getInstance().log(
                String.format("Running in Minecraft \"%s\", Forge \"%s\"", MinecraftForge.MC_VERSION,
                        MinecraftForge.getBrandingVersion()));
        instance = new CheatingEssentials();
        ceInit();
    }

    private void ceInit() {
        CELogger.getInstance().log("Loading modules...");
        ManagerModule.getInstance();
        CELogger.getInstance().log("Registering Forge event stuff...");
        eventManager = new ForgeEventManager();
        FMLCommonHandler.instance().bus().register(eventManager);
        MinecraftForge.EVENT_BUS.register(eventManager);
        CELogger.getInstance().log("Setting up modules and loading config...");
        APIModuleSetup.setupModules();
        CELogger.getInstance().log("Loading commands...");
        ManagerCommand.getInstance();
        // Load config again, because I apparently broke it...
        Config.getInstance();
    }

    public String getCommandPrefix() {
        return commandPrefix;
    }

    public void setCommandPrefix(final String newp) {
        commandPrefix = newp;
    }

    public File getDataDir() {
        if (!ceDataDir.exists()) {
            if (ceDataDir.mkdirs()) {
                return ceDataDir;
            } else {
                CELogger.getInstance().log(EnumLogType.FATAL,
                        "Could not create the CheatingEssentials data directory!");
                CELogger.getInstance().log(EnumLogType.FATAL, "Shutting down...");
                Minecraft.getMinecraft().shutdown();
            }
        }
        return ceDataDir;
    }

    public String getChatColor(final char col) {
        switch (col) {
            case '0':
                return "\u00a70";
            case '1':
                return "\u00a71";
            case '2':
                return "\u00a72";
            case '3':
                return "\u00a73";
            case '4':
                return "\u00a74";
            case '5':
                return "\u00a75";
            case '6':
                return "\u00a76";
            case '7':
                return "\u00a77";
            case '8':
                return "\u00a78";
            case '9':
                return "\u00a79";
            case 'a':
                return "\u00a7a";
            case 'b':
                return "\u00a7b";
            case 'c':
                return "\u00a7c";
            case 'd':
                return "\u00a7d";
            case 'e':
                return "\u00a7e";
            case 'f':
                return "\u00a7f";
            case 'k':
                return "\u00a7k";
            case 'm':
                return "\u00a7m";
            case 'n':
                return "\u00a7n";
            case 'r':
            default:
                return "\u00a7r";
        }
    }
}
